# -*- mode:tcl -*-
# common parts used in all mixing jobs

#include "JobConfig/beam/prolog.fcl"
#include "JobConfig/primary/prolog.fcl"

BEGIN_PROLOG

#----------------------------------------------------------------
mixerTemplateCommon: {
    module_type         : MixBackgroundFrames
    fileNames           : @nil
    #     sequential -- read the secondary events in order
    #     randomReplace -- random with replacement
    #     randomLimReplace -- events unique within a primary event
    #     randomNoReplace -- events guaranteed to be used once only.
    readMode            : sequential      # randomReplace / sequential
    wrapFiles           : true

   mu2e: {
       label                   : @nil
       protonBunchIntensityTag : "protonBunchIntensity"
       meanEventsPerProton     : @nil
       products                : @nil
       skipFactor              : 1         # temporary
       debugLevel              : 0
   }
}

#----------------------------------------------------------------
mixerTemplateTrkCal : { @table::mixerTemplateCommon }

mixerTemplateTrkCal.mu2e.products : {
    genParticleMixer   : { mixingMap: [ [ "generate"             , ""  ] ] }
    simParticleMixer   : { mixingMap: [ [ "g4run"                , ""  ] ] }
    stepPointMCMixer   : { mixingMap: [ [ "g4run:tracker"        , ":" ] ,
					[ "g4run:virtualdetector", ":" ] ,
					[ "g4run:protonabsorber" , ":" ] ] }

    caloShowerStepMixer: { mixingMap: [ [ "CaloShowerStepFromStepPt:calorimeter"  , "calorimeter"   ],
					[ "CaloShowerStepFromStepPt:calorimeterRO", "calorimeterRO" ]
				       ]
    }
}
#----------------------------------------------------------------
mixerTemplateCRV: @local::mixerTemplateCommon

mixerTemplateCRV.mu2e.products: {
   genParticleMixer: { mixingMap: [ [ "generate"     , ""  ] ] }
   simParticleMixer: { mixingMap: [ [ "crvFilter"    , ""  ] ] }
   stepPointMCMixer: { mixingMap: [ [ "crvFilter:CRV", ":" ] ] }
}

# flash cut configuration
CRVCut : { module_type : CompressStepPointMCs
	 			    stepPointMCTags    : [ "crvFilter:CRV" ]
				    caloShowerStepTags : [ ]
				    simParticleTag     : "crvFilter"
				    minTime            : 350
				    maxTime            : 1695
				    minEdep            : 10.0e-6
				    maxEdep            : 1.0e6
				    timeMapTags        : [ "protonTimeMap" ]
				    diagLevel          : 0
     				  }

# mixing configuration
Mixing : {
    producers : {
	@table::Primary.producers

#------------------------------------------------------------------------------
# proton bunch intensity - realistic one
# assume SDF = 0.6 -> sigma = 
# 1-batch mode: I0 = 1.e7   
# 2-batch mode: I0 = 3.9e7   
#------------------------------------------------------------------------------
	protonBunchIntensity: { module_type: ProtonBunchIntensityLogNormal
	    sigma        : 0.71     #  0.3814
	    extendedMean :  1.6e7     #  3.9e7     # mean of the uncut distribution
	    cutMax       : 12.0e7     # 11.7e7     # cut the tail far enough
	}

	# tracker digis for primary selection
	makeSGSPrimary : { @table::makeSGS }
	makeSDPrimary  : { @table::makeSD
	    StrawGasStepModule : makeSGSPrimary
	    TimeOffsets        :  [ @sequence::CommonMC.TimeMapsPrimary ] 
	}

	# digi compression
	compressDigiMCs : @local::DigiCompression.Mixing
    }

    filters : {
	@table::Primary.filters
	
	# TrkCal mixing
	flashMixerTrkCal    : { @table::mixerTemplateTrkCal mu2e: { @table::mixerTemplateTrkCal.mu2e label:flashMixerTrkCal   }}
	ootMixerTrkCal      : { @table::mixerTemplateTrkCal mu2e: { @table::mixerTemplateTrkCal.mu2e label:ootMixerTrkCal     }} 
	neutronMixerTrkCal  : { @table::mixerTemplateTrkCal mu2e: { @table::mixerTemplateTrkCal.mu2e label:neutronMixerTrkCal }}
	dioMixerTrkCal      : { @table::mixerTemplateTrkCal mu2e: { @table::mixerTemplateTrkCal.mu2e label:dioMixerTrkCal     }}
	photonMixerTrkCal   : { @table::mixerTemplateTrkCal mu2e: { @table::mixerTemplateTrkCal.mu2e label:photonMixerTrkCal  }}
	protonMixerTrkCal   : { @table::mixerTemplateTrkCal mu2e: { @table::mixerTemplateTrkCal.mu2e label:protonMixerTrkCal  }}
	deuteronMixerTrkCal : { @table::mixerTemplateTrkCal mu2e: { @table::mixerTemplateTrkCal.mu2e label:deuteronMixerTrkCal}}

	# CRV mixing
	PSMixerCRV	    : { @table::mixerTemplateCRV    mu2e: { @table::mixerTemplateCRV.mu2e    label:PSMixerCRV      }}
	TSMixerCRV	    : { @table::mixerTemplateCRV    mu2e: { @table::mixerTemplateCRV.mu2e    label:TSMixerCRV      }}
	DSMixerCRV	    : { @table::mixerTemplateCRV    mu2e: { @table::mixerTemplateCRV.mu2e    label:DSMixerCRV      }}
	ootMixerCRV	    : { @table::mixerTemplateCRV    mu2e: { @table::mixerTemplateCRV.mu2e    label:ootMixerCRV     }}
	neutronMixerCRV     : { @table::mixerTemplateCRV    mu2e: { @table::mixerTemplateCRV.mu2e    label:neutronMixerCRV }}
	dioMixerCRV	    : { @table::mixerTemplateCRV    mu2e: { @table::mixerTemplateCRV.mu2e    label:dioMixerCRV     }}
	photonMixerCRV      : { @table::mixerTemplateCRV    mu2e: { @table::mixerTemplateCRV.mu2e    label:photonMixerCRV  }}

	# digi filtering for Primary selection.
	DigiFilter : { 
	    module_type : StrawDigiMCFilter
	    StrawDigiMCCollection : "makeSDPrimary"
	}
    }
    analyzers : {
	@table::Primary.analyzers
    }
    # input time maps from cut mix inputs.  All are needed
    protonTimeMaps : [ "flashMixerTrkCal:protonTimeMap" ] # [, "PSMixerCRV:protonTimeMap", "DSMixerCRV:protonTimeMap"]

    # cosmic time maps from primary generation
    cosmicTimeMaps : ["cosmicTimeMapPrimary"]

    # calo tags.  flashMixer is different because they are filtered
    # NB: caloMixerTags <-> TrkCalMixSequence : thre should be one-to-one correspondence, as 
    # CaloShowerStepROFromShowerStep and compressDigiMCs use them
    # in essense, for each tag in 'caloMixerTags', there should be a running mixer

    caloMixerTags : [ 
		     "ootMixerTrkCal:calorimeter"     , 
		     "protonMixerTrkCal:calorimeter"  , 
		     "deuteronMixerTrkCal:calorimeter", 
		     "dioMixerTrkCal:calorimeter"     , 
		     "photonMixerTrkCal:calorimeter"  ,
		     "neutronMixerTrkCal:calorimeter" , 
		     "flashMixerTrkCal:calorimeter" 
		    ]
    # sequences
    TrkCalMixSequence     : [ flashMixerTrkCal  , 
			      ootMixerTrkCal    , 
			      neutronMixerTrkCal, 
			      dioMixerTrkCal    , 
			      photonMixerTrkCal , 
			      protonMixerTrkCal , 
			      deuteronMixerTrkCal 
			     ]

    CRVMixSequence        : [ PSMixerCRV, TSMixerCRV, DSMixerCRV,
			      ootMixerCRV, neutronMixerCRV, dioMixerCRV, photonMixerCRV 
			     ]
    
    CreatePrimarySequence : [ @sequence::Primary.GenAndG4,
			      @sequence::CommonMC.PrimaryDigiSim,
			      makeSGSPrimary, makeSDPrimary, DigiFilter 
			     ]

    # paths and output
    EndPath : [ @sequence::Primary.EndPath ] 

    Output  : {
	module_type    : RootOutput
	SelectEvents   : [ TriggerPath ]
	fileName       : @nil
	outputCommands : @local::DigiCompression.OutputCommands
    }

    # drops for reading primaries as input to mixing.  TrkDigis are kept to allow filtering
    Input : {
	droppedProducts : ["drop mu2e::CaloDigis_*_*_*",
			   "drop mu2e::CrvDigis_*_*_*",
			   "drop mu2e::CrvDigiMCs_*_*_*",
			   "drop mu2e::CaloShowerSims_*_*_*",
			   "drop art::TriggerResults_*_*_*" ]
    }
}

# Mixing.producers.compressDigiMCs.simParticleTags    : [ "g4run", @sequence::Mixing.TrkCalMixSequence, @sequence::Mixing.CRVMixSequence ]

Mixing.producers.compressDigiMCs.simParticleTags    : [ "g4run", @sequence::Mixing.TrkCalMixSequence ]
Mixing.producers.compressDigiMCs.caloShowerStepTags : [ "CaloShowerStepFromStepPt:calorimeter"      , @sequence::Mixing.caloMixerTags ]
#------------------------------------------------------------------------------
# 
Mixing.pbi_mix             : [ protonBunchIntensity               , 
			       EWMProducer                        , 
			       @sequence::Mixing.TrkCalMixSequence 
			      ]

Mixing.pbi_mix_digi_no_crv : [ protonBunchIntensity               ,
			       EWMProducer                        , 
			       @sequence::Mixing.TrkCalMixSequence,
			       @sequence::CommonMC.DigiSim        ,
			       @sequence::TrackerMC.DigiSim       ,
			       @sequence::CaloDigiMC.DigiSim
			      ]			

Mixing.pbi_mix_digi_all    : [ protonBunchIntensity               ,
			       EWMProducer                        , 
			       @sequence::Mixing.TrkCalMixSequence,
			       @sequence::Mixing.CRVMixSequence,
			       @sequence::CommonMC.DigiSim,
			       @sequence::TrackerMC.DigiSim,
			       @sequence::CaloDigiMC.DigiSim,
			       @sequence::CrvDAQPackage.CrvResponseSequence 
			      ]			
#------------------------------------------------------------------------------
# mixing_001: generate signal particle, add background mixing with CRV, compress
# mixing_002: generate signal particle, add background mixing , no CRV, compress
# mixing_003: just mix backgrounds, compress
#------------------------------------------------------------------------------
Mixing.mixing_001 : [ @sequence::Mixing.CreatePrimarySequence,
		      @sequence::Mixing.pbi_mix_digi_all     ,
		      compressDigiMCs 
		     ]

Mixing.mixing_002 : [ @sequence::Mixing.CreatePrimarySequence,
		      @sequence::Mixing.pbi_mix_digi_no_crv  ,
		      compressDigiMCs 
		     ]

Mixing.mixing_003 : [ @sequence::Mixing.pbi_mix_digi_no_crv  ,
		      compressDigiMCs 
		     ]

END_PROLOG
